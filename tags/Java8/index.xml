<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java8 on kongmu373的博客</title>
    <link>https://kongmu373.github.io/tags/Java8/</link>
    <description>Recent content in Java8 on kongmu373的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 07 Jun 2020 14:33:15 +0800</lastBuildDate>
    
	<atom:link href="https://kongmu373.github.io/tags/Java8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Stream</title>
      <link>https://kongmu373.github.io/posts/stream/</link>
      <pubDate>Sun, 07 Jun 2020 14:33:15 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/stream/</guid>
      <description>什么是Stream 一个 &amp;ldquo;流&amp;rdquo; 好处: 不容易出错 简化代码 可读性/可维护性++ // 请把姓张的用户挑出来，把他们按照年龄排序,然后把它们的名单报告给我 List&amp;lt;User&amp;gt; users = getUsers(); List&amp;lt;String&amp;gt; list = users.stream(). filter(user -&amp;gt; user.name.startsWith(&amp;quot;张&amp;quot;)) .sorted((Comparator.comparing(User::getAge))) .map(User::getName) .collect(Collectors.toList()); 使用idea的pl</description>
    </item>
    
    <item>
      <title>函数式数据处理 流</title>
      <link>https://kongmu373.github.io/posts/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E6%B5%81/</link>
      <pubDate>Sat, 30 May 2020 13:47:41 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E6%B5%81/</guid>
      <description>流(Stream) 什么是流? 为什么需要流? 流的使用与流管道的构成: Stream pipeline Java中集合与流的关系 总结 1.什么是流? java.util.stream(java8 的新成员) 以声明性方式处理数据集合 有关计算的(像一个高级版本的Iterator) Stream 与 Iterator 的比较 Iterator只能显式地一个一个遍历元素，Stream只需给出对包含的元</description>
    </item>
    
    <item>
      <title>Lambda实战</title>
      <link>https://kongmu373.github.io/posts/Lambda%E5%AE%9E%E6%88%98/</link>
      <pubDate>Fri, 29 May 2020 09:08:47 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/Lambda%E5%AE%9E%E6%88%98/</guid>
      <description>如何利用Lambda简化接口代码 接口实现简化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public interface OperationInterface { int operator(int a, int b); // (int a, int b) -&amp;gt; int -- (int, int) -&amp;gt;int } public class AddOperation implements OperationInterface { @Override public int operator(int a, int b) { return a+b; } } public class MultiplicationOperation implements Operatinable { @Override public int operator(int a, int b) { return a * b; } } public class OperationDemo { public static void main(String[] args) { Operatinable multiplicationOperation = new MultiplicationOperation(); System.out.println(&amp;#34;Multiplication Operation: &amp;#34; + multiplicationOperation.operator(1, 3)); Operatinable AddOperation = new AddOperation(); System.out.println(&amp;#34;AddOperation: &amp;#34;</description>
    </item>
    
    <item>
      <title>Lambda表达式与函数接口</title>
      <link>https://kongmu373.github.io/posts/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Tue, 26 May 2020 14:05:22 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3/</guid>
      <description>Lambda表达式与函数式接口 Lambda表达式 Lambda 是什么? 可以把Lambda表达式理解为 简洁地表示可传递匿名函数的一种方式 Lambda表达式没有名称，但它有参数列表，函数主体，返回类型，有时还可以抛出的异常列表。 有以下特性: 匿名:与匿名函数一样不需要方法名 函数:有参数列表，函数主</description>
    </item>
    
    <item>
      <title>函数式编程与Java8新特性</title>
      <link>https://kongmu373.github.io/posts/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%8EJava8%E6%96%B0%E7%89%B9%E6%80%A7/</link>
      <pubDate>Tue, 26 May 2020 08:45:15 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%8EJava8%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
      <description>函数 就是 参数 映射成返回值. 函数式编程 &amp;ldquo;函数式编程&amp;rdquo; 是一种 &amp;ldquo;编程范式&amp;rdquo; 主要思想: 把运算过程尽量写成一系列嵌套的函数调用 -&amp;gt; y= f(g(x)) &amp;lt;=&amp;gt; y= g(x).f(). 惰性计算: 并不立刻算，只有在需要产生表达式的值才开始进行运算 函数是 &amp;ldquo;第一等公民&amp;rdquo;</description>
    </item>
    
  </channel>
</rss>