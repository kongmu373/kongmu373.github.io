<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DP on kongmu373的博客</title>
    <link>https://kongmu373.github.io/tags/DP/</link>
    <description>Recent content in DP on kongmu373的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 20 Jul 2020 13:38:28 +0800</lastBuildDate>
    
	<atom:link href="https://kongmu373.github.io/tags/DP/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>198 HouseRobber</title>
      <link>https://kongmu373.github.io/posts/leetcode/198-HouseRobber/</link>
      <pubDate>Mon, 20 Jul 2020 13:38:28 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/leetcode/198-HouseRobber/</guid>
      <description>对应 leetCode 198题. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package com.kongmu373.leetcode.editor.en; public class HouseRobber { public static void main(String[] args) { Solution solution = new HouseRobber().new Solution(); } /** * Recursion + Memorization * For a given house i, we have two options: * 1. Take the moeny if we didn&amp;#39;t robber house i - 1 * 2. Skip it * rob(n) = max(rob(n-2) + money[i], rob(n-1)) * Time complexity:O(n), Space complexity:O(n) * &amp;lt;p&amp;gt; * DP * &amp;lt;p&amp;gt; * dp[i]: Max money after * &amp;#34;visiting&amp;#34; house[i] * &amp;lt;p&amp;gt; * dp[i]: max(dp[i-2] + money[i],</description>
    </item>
    
    <item>
      <title>746 MinCostClimbingStairs</title>
      <link>https://kongmu373.github.io/posts/leetcode/746-MinCostClimbingStairs/</link>
      <pubDate>Mon, 20 Jul 2020 11:09:30 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/leetcode/746-MinCostClimbingStairs/</guid>
      <description>On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 i ndexed).
Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the s tep with index 0, or the step with index 1.
Example 1:
Input: cost = [10, 15, 20] Output: 15 Explanation: Cheapest is start on cost[1], pay that cost and go to the top.
Example 2:
Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] Output: 6 Explanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[ 3].
Note:
cost will have a length in the range [2, 1000]. Every cost[i] will be an integer in the range [0, 999].
Related Topics Array Dynamic Programming</description>
    </item>
    
  </channel>
</rss>