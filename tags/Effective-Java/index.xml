<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Effective Java on kongmu373的博客</title>
    <link>https://kongmu373.github.io/tags/Effective-Java/</link>
    <description>Recent content in Effective Java on kongmu373的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 14 Jun 2020 18:47:20 +0800</lastBuildDate>
    
	<atom:link href="https://kongmu373.github.io/tags/Effective-Java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Item11 12</title>
      <link>https://kongmu373.github.io/posts/effective-java/item11-12/</link>
      <pubDate>Sun, 14 Jun 2020 18:47:20 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/effective-java/item11-12/</guid>
      <description>Item 11: Always override hashCode when you override equals（当覆盖 equals 时，始终覆盖 hashCode） equals相同的，hascodes也必须相同· equals不相同的，hashcodes也可以相同 没有hashCode的实现将破坏基于hash实现的集合的功能 不好的hashCode实现会降低基于hash实现的性能</description>
    </item>
    
    <item>
      <title>Item10</title>
      <link>https://kongmu373.github.io/posts/effective-java/item10/</link>
      <pubDate>Sun, 14 Jun 2020 17:21:00 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/effective-java/item10/</guid>
      <description>Item 10: Obey the general contract when overriding equals（覆盖 equals 方法时应遵守的约定） 覆盖 equals 方法似乎很简单，但是有很多覆盖的方式会导致出错，而且后果可能非常严重。 equals 约定 &amp;ndash; equivalence relation 覆盖equals 应该遵守(equivalence relation) 自反性(Reflexive), x.equals(x) == true 对称性(Symmetric), x.equals(y) == y.equals(x) 传递性(Tra</description>
    </item>
    
    <item>
      <title>Item9</title>
      <link>https://kongmu373.github.io/posts/effective-java/item9/</link>
      <pubDate>Sun, 14 Jun 2020 14:35:29 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/effective-java/item9/</guid>
      <description>Item 9: Prefer try-with-resources to try-finally（使用 try-with-resources 优于 try-finally） try-finally 从历史上看，try-finally 语句是确保正确关闭资源的最佳方法 1 2 3 4 5 6 7 8 9 // try-finally - No longer the best way to close resources! static String firstLineOfFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path)); try { return br.readLine(); } finally { br.close(); } } 但添加第二个资源时，情况会变得更糟： 1 2 3 4 5 6 7 8 9 10 11</description>
    </item>
    
    <item>
      <title>Item7</title>
      <link>https://kongmu373.github.io/posts/effective-java/item7/</link>
      <pubDate>Fri, 12 Jun 2020 19:30:16 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/effective-java/item7/</guid>
      <description>Item7: Eliminate obsolete object references （排除过时的对象引用） 自实现的栈可能存在忽略的内存泄露 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 mport java.util.Arrays; import java.util.EmptyStackException; // Can you spot the &amp;#34;memory leak&amp;#34;? public class Stack { private Object[] elements; private int size = 0; private static final int DEFAULT_INITIAL_CAPACITY = 16; public Stack() { elements = new Object[DEFAULT_INITIAL_CAPACITY]; } public void push(Object e) { ensureCapacity(); elements[size++] = e; } public Object pop() { if (size == 0) throw new EmptyStackException(); return elements[--size]; } /** * Ensure space for at least one more element, roughly * doubling</description>
    </item>
    
    <item>
      <title>Item6</title>
      <link>https://kongmu373.github.io/posts/effective-java/item6/</link>
      <pubDate>Fri, 12 Jun 2020 16:27:48 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/effective-java/item6/</guid>
      <description>Item6 Avoid creating unecessary objects(避免创建不必要的对象) 重用对象从而提高性能 exmaple1: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // Reusing expensive object for improved performance (Pages 22 and 23) public class RomanNumerals { // Performance can be greatly improved! (Page 22) static boolean isRomanNumeralSlow(String s) { return s.matches(&amp;#34;^(?=.)M*(C[MD]|D?C{0,3})&amp;#34; + &amp;#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&amp;#34;); } // Reusing expensive object for improved performance (Page 23) private static final Pattern ROMAN = Pattern.compile( &amp;#34;^(?=.)M*(C[MD]|D?C{0,3})&amp;#34; + &amp;#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&amp;#34;); static boolean isRomanNumeralFast(String s) { return ROMAN.matcher(s).matches(); } public static void main(String[] args) { int numSets = Integer.parseInt(args[0]);</description>
    </item>
    
    <item>
      <title>Item4 5</title>
      <link>https://kongmu373.github.io/posts/effective-java/item4-5/</link>
      <pubDate>Fri, 12 Jun 2020 16:01:33 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/effective-java/item4-5/</guid>
      <description>Item4 Enforce noninstantiability with a private constructor(强迫非实例化的类使用私有构造方法) 1 2 3 4 5 6 7 8 9 // Noninstantiable utility class public class UtilityClass { // Suppress(禁用) default constructor for noninstantiability. private UtilityClass() { throw new AssertionError(); } // Remainder omitted } 总结 使用私有构造方法避免实例化该类 如果调用该私有方法就抛出异常 这种技术在构建工具类的时候，经常会被用到 Item5 Prefer dependency injection to hardwiring resources (依</description>
    </item>
    
    <item>
      <title>Item3</title>
      <link>https://kongmu373.github.io/posts/effective-java/item3/</link>
      <pubDate>Wed, 10 Jun 2020 16:16:08 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/effective-java/item3/</guid>
      <description>Item 3:Enforce the singleton property with a private consturctor or an enum type 使用私有构造函数或枚举类型实施单例属性 Singleton with public final field (使用final字段实现单例) 不好使用单元测试 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class Elvis { public static final Elvis INSTANCE = new Elvis(); private Elvis() {} public void leaveTheBuiding() { // do something } // This code would normally appear outside the class! public static void main(String[] args) { Elvis elvis = Elvis.INSTANCE; elvis.leaveTheBuilding(); } } Single with static factory 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>Item2</title>
      <link>https://kongmu373.github.io/posts/effective-java/item2/</link>
      <pubDate>Wed, 10 Jun 2020 15:45:39 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/effective-java/item2/</guid>
      <description>Item 2: Consider a builder when faced with many constructor parameters. 都构造函数有多个参数时，考虑用builder. 当类的参数过多的时候,使用不同方法创建对s象对应的情况 构造函数 过于啰嗦 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 // Telescoping constructor pattern - does not scale well! public class NutritionFacts { private final int servingSize; // (mL) required private final int servings; // (per container) required private final int calories; // (per serving) optional private</description>
    </item>
    
    <item>
      <title>Item1</title>
      <link>https://kongmu373.github.io/posts/effective-java/item1/</link>
      <pubDate>Wed, 10 Jun 2020 15:42:17 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/effective-java/item1/</guid>
      <description>Item1: 考虑以静态工厂方法代替构造函数 什么是静态工厂方法 它是一个类提供的公共静态工厂方法，作用只是一个返回类实例的静态方法。 例子 1 2 3 4 // boolean 基本类型 转换为 Boolean 对象的引用 public static Boolean valueOf(boolean b) { return b ? Boolean.TRUE : Boolean.FALSE; } 注意的是静态工厂方法与来设计模式的工厂方法模式不同. 静态工厂方法的优缺点 相较于构造函数的优点:</description>
    </item>
    
    <item>
      <title>Item8</title>
      <link>https://kongmu373.github.io/posts/effective-java/item8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kongmu373.github.io/posts/effective-java/item8/</guid>
      <description>Item 8: Avoid finalizers and cleaners（避免使用终结器和清除器） 终结器和清除器的缺点 缺点: 不能保证它们会被立即执行(不仅不能保证终结器或清洁剂能及时运行；它并不能保证它们能运行。) 在终结期间抛出的未捕获异常被忽略，该对象的终结终止。 严重影响性能。使用 try-with-resources 比终结器快得多(50倍左右,清除器比终结</description>
    </item>
    
  </channel>
</rss>