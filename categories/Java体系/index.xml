<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java体系 on kongmu373的博客</title>
    <link>https://kongmu373.github.io/categories/Java%E4%BD%93%E7%B3%BB/</link>
    <description>Recent content in Java体系 on kongmu373的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 09 Jun 2020 11:19:47 +0800</lastBuildDate>
    
	<atom:link href="https://kongmu373.github.io/categories/Java%E4%BD%93%E7%B3%BB/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>类型与反射</title>
      <link>https://kongmu373.github.io/posts/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Tue, 09 Jun 2020 11:19:47 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/</guid>
      <description>Spring全家桶，任何上规模的框架,都使用了框架 Java的类与Class RTTI(Run-Time Type Identification) 运行时类型识别 将子类赋值给父类,调用子类的方法报错 1 2 Object obj = new WhiteCat(); obj.catchMouse(); // catchMouse()是猫的方法，Object类没有这个方法，所以编译报错 Object.getClass 实体方法拿到类型信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>字符串原理</title>
      <link>https://kongmu373.github.io/posts/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 08 Jun 2020 16:57:36 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%9F%E7%90%86/</guid>
      <description>字符串是最重要的引用类型 互联网基本上只干一件事: 处理字符串 能处理好字符串是Web服务器的基本要求 字符串的不可变性 字符串的不可变是如何保证的? String是final class不能被继承 保存字符的数组是final的，不能改变指向 String的所有公开API都不能改变这个value的</description>
    </item>
    
    <item>
      <title>Stream</title>
      <link>https://kongmu373.github.io/posts/stream/</link>
      <pubDate>Sun, 07 Jun 2020 14:33:15 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/stream/</guid>
      <description>什么是Stream 一个 &amp;ldquo;流&amp;rdquo; 好处: 不容易出错 简化代码 可读性/可维护性++ // 请把姓张的用户挑出来，把他们按照年龄排序,然后把它们的名单报告给我 List&amp;lt;User&amp;gt; users = getUsers(); List&amp;lt;String&amp;gt; list = users.stream(). filter(user -&amp;gt; user.name.startsWith(&amp;quot;张&amp;quot;)) .sorted((Comparator.comparing(User::getAge))) .map(User::getName) .collect(Collectors.toList()); 使用idea的pl</description>
    </item>
    
    <item>
      <title>线程池</title>
      <link>https://kongmu373.github.io/posts/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Tue, 02 Jun 2020 08:28:19 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>线程池与Callable/Future 什么是线程池 线程时昂贵的 (Java线程模型的缺陷) 线程池时预先定义好的若干个线程 Java中的线程池 不用频繁创建线程 Callable/Future 类比Runnable, Callable可以返回值，抛出异常 Future代表一个&amp;quot;未来才会返回的结果&amp;rdquo; 实战</description>
    </item>
    
    <item>
      <title>生产者与消费者模型</title>
      <link>https://kongmu373.github.io/posts/%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jun 2020 19:09:43 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</guid>
      <description>使用三种方法解决生产者与消费者模型 wait/notify/notifyAll Lock/Condition(JUC) BlockingQueue(JUC) wait/notify/notifyAll 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 public class Main { public static void main(String[] args) throws InterruptedException { final Object lock = new Object(); Optional&amp;lt;Integer&amp;gt; empty = Optional.empty(); Container container = new Container(empty); Producer producer = new Producer(container, lock); Consumer consumer = new Consumer(container, lock);</description>
    </item>
    
    <item>
      <title>多线程带来的问题</title>
      <link>https://kongmu373.github.io/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jun 2020 13:41:41 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>线程不安全的表现 数据错误 i++问题 死锁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // 死锁代码 public class Main { private static final Object lock1 = new Object(); private static final Object lock2 = new Object(); public static void main(String[] args) throws InterruptedException { new Thread1().start(); new Thread2().start(); } private static class Thread1 extends Thread { @Override public void run() { synchronized (lock1) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } synchronized (lock2) { System.out.println(); } } } } private static class Thread2 extends</description>
    </item>
    
    <item>
      <title>多线程基本原理</title>
      <link>https://kongmu373.github.io/posts/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jun 2020 10:41:18 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>为什么需要多线程? Thread线程 Java中线程的表示 多线程问题的来源 多线程的应用场景 一、为什么需要多线程? Java的执行模型是同步/阻塞的 如果你执行非常耗时的操作，当前方法的执行流会阻塞，等待耗时的操作执行完 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // main方法要打印&amp;#34;main&amp;#</description>
    </item>
    
    <item>
      <title>数据库详解</title>
      <link>https://kongmu373.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 30 May 2020 11:53:00 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E8%A7%A3/</guid>
      <description>数据库基本概念 什么是SQL 数据库/表 约束/索引 数据库 数据库提供结构化数据的持久化存储 索引保证数据查询的速度 事务的原子性保证数据不丢失 要么都发生,要么都不发生 数据库的基本结构 数据库的实际使用 Schema: 设计一个数据库 数据库的类型与SQL语句 整数类型： int/bigint 字符串类型:varchar(100) (变</description>
    </item>
    
    <item>
      <title>Java异常</title>
      <link>https://kongmu373.github.io/posts/Java%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Fri, 29 May 2020 19:41:08 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/Java%E5%BC%82%E5%B8%B8/</guid>
      <description>Java的异常体系 Throwable - 可以被抛出的东西(有毒) Exception - checked execption(受检异常，有毒) 预期之内的异常 IOException RuntimeException(运行时异常， 无毒) 预期之外的异常 不应该出现的 Error(错误，无毒) OutOfMemoryError 没办法处理的 catch的级联与合并 有毒(checked exception) 无毒(unche</description>
    </item>
    
    <item>
      <title>Java的IO</title>
      <link>https://kongmu373.github.io/posts/Java%E7%9A%84IO/</link>
      <pubDate>Fri, 29 May 2020 11:45:59 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/Java%E7%9A%84IO/</guid>
      <description>Java的IO IO就是输入输出 什么是IO呢？ InputStream/OutputStream IO的使用 计算机体系原理 计算机分三级 CPU 频率 3GHz -&amp;gt; 每秒30亿次（每秒运行30亿条指令 10亿换算成 1纳秒） 即1条指令大约要0.3纳秒 内存 memory 存数据 断电丢失 硬盘 (Hard Disk &amp;ndash; HDD) 固态 SSD 存数据 容量大，断电不丢失 比内存慢 文件的本质 一段字节流: 文本文件(txt</description>
    </item>
    
    <item>
      <title>HTTP协议</title>
      <link>https://kongmu373.github.io/posts/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 28 May 2020 14:28:21 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</guid>
      <description>HTTP协议 互联网所有东西都是基于HTTP协议 HTTP 方法 GET 和 POST 的区别 GET 所有数据全部都放在 HTTP Request header 里面 POST 真正的数据放在 HTTP Request body 里面 (登录，上传文件) DELETE PUT &amp;hellip; HTTP 状态码 2XX 成功 3XX 重定向 4XX 客户端出问题 405 客户端请求的方法被禁止 5XX HTTP状态码的博客 HTTP 请求header 重要的header Accept* Cookie User-Agent Referer 当前页面是</description>
    </item>
    
    <item>
      <title>Web前后端基础结构原理</title>
      <link>https://kongmu373.github.io/posts/Web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 27 May 2020 23:15:03 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/Web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84%E5%8E%9F%E7%90%86/</guid>
      <description>计算机网络的术语 主机 每个主机会有一个地址(IPV4地址为32位，4个字节,如115.118.112.3 2^32=42亿个数字,不够用了) (网络，主机，IP地址(Internet Protocol &amp;ndash; 网络协议)) IPV6(128位，为地球的每一颗沙子分配地址) 域名与DNS 知道与哪台主机通信，即必须知</description>
    </item>
    
    <item>
      <title>Collection</title>
      <link>https://kongmu373.github.io/posts/Collection/</link>
      <pubDate>Wed, 27 May 2020 10:55:23 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/Collection/</guid>
      <description>Collection 简介 Collection是什么？(root interface) 是接口，不是类，不能被new 一组东西，一篮子鸡蛋,只包含一种元素 Collection 体系 (root interface) 例如,ArrayList的Diagrams Collection 常使用的方法: new: new ArrayList(Collection), new ArrayList() 1 2 3 4 5 6 7 8 9 10 11 12 13 Collection&amp;lt;Integer&amp;gt; c = new LinkedHashSet(); // IntegerList List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(c); // == List&amp;lt;Integer&amp;gt; list2 = new ArrayList&amp;lt;&amp;gt;(); list2.addAll(); // == List&amp;lt;Integer&amp;gt; list3 = new ArrayList&amp;lt;&amp;gt;(); for(Integer i : c) { list3.add(i);</description>
    </item>
    
    <item>
      <title>Java包管理</title>
      <link>https://kongmu373.github.io/posts/java%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 25 May 2020 14:29:03 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/java%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      <description>包是什么? 就是把许多类放在一起打的压缩包 什么是包管理 包管理的本质就是告诉JVM如何找到所需的第三方类库 为什么要用包管理呢？ 从运行一个JAVA程序说起： JVM的工作内容: 执行一个类的字节码 加入这个过程中碰到了新的类， 加载它 那么，去哪里加载这些类呢?(通过类路径) 类路径 (Classpath) 在哪可以找到</description>
    </item>
    
  </channel>
</rss>