<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试题 on kongmu373的博客</title>
    <link>https://kongmu373.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <description>Recent content in 面试题 on kongmu373的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 16 Jul 2020 09:27:10 +0800</lastBuildDate>
    
	<atom:link href="https://kongmu373.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JVM</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/JVM/</link>
      <pubDate>Thu, 16 Jul 2020 09:27:10 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/JVM/</guid>
      <description>JLS 与 JVMS Java Language Specification(Java语言规范) 定义Java语言的语法 (Java编译器) (Java Virtual Machine Specification)Java虚拟机规范 定义字节码如何在JVM中执行 两个没有必然联系(JLS是*.java 编译成 *.class的规范, JVMS是*.class在JVM中运行</description>
    </item>
    
    <item>
      <title>Spring</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/spring/</link>
      <pubDate>Wed, 08 Jul 2020 17:09:31 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/spring/</guid>
      <description>什么是IoC容器， 为什么需要IoC 背景:一个应用要启动，可能有不同的组件,把不同职责的功能放在不同的类里面，类之间互相依赖,随着应用规模越来越大，这种依赖就越来越繁杂 IoC,Inverse of Control(控制反转) 不需要手动控制各种对象的创建和依赖,(由IoC容器完成)将依赖的装配权交给IoC容器</description>
    </item>
    
    <item>
      <title>类型与反射</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Tue, 07 Jul 2020 16:30:41 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%8F%8D%E5%B0%84/</guid>
      <description>什么是反射(Reflection)? 运行时行为，动态调用 动态代理 一般来说,JVM中创建每一个对象都需要一份说明书,创建多少个对象这份说明书是不会变的 我们把这份说明书称为class对象 class对象是由 xx.java源代码 通过 javac 编译成的(如果maven，.class文件放在targ</description>
    </item>
    
    <item>
      <title>Web</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/web/</link>
      <pubDate>Tue, 07 Jul 2020 14:54:54 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/web/</guid>
      <description>常见的HTTP状态码 2XX 一切正常 3XX 代表跳转 4XX 代表客户端异常 5XX 代表服务端异常 常用状态码 200/201 created / 301 永久/ 302 临时 403/403 , 500/502/503/504 get/post的区别? get获取资源，而post用于发送数据 get参数在请求字符串里，post参数放在request body中 GET: 只有header POST: 把数据放在body get</description>
    </item>
    
    <item>
      <title>基本数据结构和算法</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 06 Jul 2020 14:34:29 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</guid>
      <description>集合类中常见的数据结构以及时间复杂度 ArrayList: 数组, 随机查找是常数 寻址O(1) 插入/删除 O(n) 有序的话，二分查找是O(logn) LinkedList: 双链表,可当作队列和栈 寻址O(n) 插入/删除 O(1) 查找O(n) HashSet/HashMap: 哈希表 都是O(1) TreeSet/TreeMap: 红黑树 都是O(lgn) ConcurrentHashMap: 分段+哈希表 LinkedHashMap:链表+哈希表 队列和</description>
    </item>
    
    <item>
      <title>计算机网络</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 06 Jul 2020 14:02:41 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>TCP/UDP 区别 TCP, Transmission control Protocol 稳定可靠，有纠错和重传 保证交付 应用对质量要求高的场景 UDP, User Datagram Protocol 快，质量低 尽最大可能交付 对质量要求不高的场景，如:直播 在浏览器中发起一个HTTP请求，底层都是TCP连接 从浏览器发出请求到服务器接收到请求发送了什么? 在浏览器输入https://taobao.com,计算机</description>
    </item>
    
    <item>
      <title>计算机体系原理</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 06 Jul 2020 10:30:12 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/</guid>
      <description>hardware(CPU, 硬盘，内存) -&amp;gt; OS -&amp;gt; software 进程和线程的区别? 进程和线程都是操作系统层面的概念 os-&amp;gt; process(进程,拥有独立的内存空间以及文件描述符(FD,File Descriptor),是一个基本的程序单元,进程之间是互相独立的) 进程中所有的线程共享一块内存以及文件描述符等各类进程内的资源 共享资源</description>
    </item>
    
    <item>
      <title>Java的异常体系</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/Java%E7%9A%84%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Sun, 05 Jul 2020 09:50:22 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/Java%E7%9A%84%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</guid>
      <description>Java的异常体系结构? Throwable，异常/错误的祖先类,任何可以被丢出来的东西 throws Throwable的子类 Error extends Throwable 致命的错误 Exception extends Throwable 可以从异常状态中恢复 RuntimeException extends Exception 预料之外的异常,通常代表一个bug unchecked Exception 不用被编译器所检查,其他异常都需要编译器检查(checkedException) 常</description>
    </item>
    
    <item>
      <title>集合框架</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sat, 04 Jul 2020 19:11:14 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</guid>
      <description>HashMap原理 详情在另一篇博客HashMap源码分析 List/Set/Map 区别 List 有位置顺序，因此可以通过下标获取对应的值,get(index) 存储有顺序的东西 Set 无序的 元素不同 当我们需要去重的时候，就可以使用它 Map 映射 HashMap和HashTable的区别? HashTable基本不用 相同点: 都是基</description>
    </item>
    
    <item>
      <title>Java面向对象</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 04 Jul 2020 18:26:46 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>==/equals有什么区别? == 是判断是否为同一个对象 equals 是判断两个对象是否相等 深拷贝/浅拷贝有什么区别? 拷贝一个引用对象： 浅拷贝：拷贝该对象，但并不把该对象里面的引用链所有对象全部拷贝一份，只是把引用地址复制一份 深拷贝: 拷贝对象的时候，把该对象里面的引用链的对象都复制一份而不是单</description>
    </item>
    
    <item>
      <title>Java基础</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/java%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 03 Jul 2020 16:28:56 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/java%E5%9F%BA%E7%A1%80/</guid>
      <description>Java程序的运行原理 当点击编译器的运行按钮后，发生了什么呢?(分为编译过程和启动过程) .java文件执行编译(被Compiler的编译器处理)，生成.calss文件(字节码) .class文件被jvm识别和加载 即成链状: .java -(编译)-&amp;gt; .class -(被识别)-&amp;gt; jvm 编译后的代码</description>
    </item>
    
  </channel>
</rss>