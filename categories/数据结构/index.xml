<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on kongmu373的博客</title>
    <link>https://kongmu373.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on kongmu373的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 26 Jul 2020 10:36:51 +0800</lastBuildDate>
    
	<atom:link href="https://kongmu373.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>栈</title>
      <link>https://kongmu373.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/</link>
      <pubDate>Sun, 26 Jul 2020 10:36:51 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/</guid>
      <description>简单的数组栈 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 /** * 1. 使用数组来模拟栈 * 2. 定义一个top,来表示栈顶，初始化为-1 * 3. 入栈的操作, 当有数据加入到栈时, top++; stack[top] = data; * 4. 出栈的操作, int value = stack[top]; top--, return value; */ public class SimpleArrayStack { private int maxSize; // 栈大小 private int[] stack; //</description>
    </item>
    
    <item>
      <title>环形链表与约瑟夫问题</title>
      <link>https://kongmu373.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E4%B8%8E%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 26 Jul 2020 09:26:14 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E4%B8%8E%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/</guid>
      <description>Josephu 问题 n个人围着作，编号分别为1,2,&amp;hellip; n ,约定从编号k开始报数(1&amp;lt;=k&amp;lt;=n) 从1开始报数，数到m的那个人出列，然后下一位又从1开始报数到m，以此类推，直到所有人都出列，求产生的出队编号序列 note: 循环链表 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</description>
    </item>
    
    <item>
      <title>DoubleLinkedList</title>
      <link>https://kongmu373.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/doubleLinkedList/</link>
      <pubDate>Sun, 26 Jul 2020 08:50:55 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/doubleLinkedList/</guid>
      <description>双向链表的实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 /** * struct Node includes: next, prev, no,data * &amp;lt;p&amp;gt; * CRUD: * &amp;lt;p&amp;gt; * 1) 遍历与单链表一样，真是可</description>
    </item>
    
    <item>
      <title>几种排序算法的实现</title>
      <link>https://kongmu373.github.io/posts/%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 27 May 2020 10:27:22 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>冒泡排序 复杂度O(n^2) 空间复杂度(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class BubbleSort { public static void sort(int[] array) { for (int i = 0; i &amp;lt; array.length; i++) { for (int j = 0; j &amp;lt; array.length - i - 1; j++) { if (array[i] &amp;gt; array[i + 1]) { swap(array, i, i + 1); } } } } private static void swap(int[] array, int i, int j) { int temp = array[i]; array[i] = array[j]; array[j] = temp; } } 快速排序(不是原地版本) 复杂度O(n(logn)) 空间复</description>
    </item>
    
  </channel>
</rss>