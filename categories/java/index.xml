<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on kongmu373的博客</title>
    <link>https://kongmu373.github.io/categories/java/</link>
    <description>Recent content in java on kongmu373的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 12 Aug 2020 12:55:36 +0800</lastBuildDate>
    
	<atom:link href="https://kongmu373.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>模拟数据库连接池</title>
      <link>https://kongmu373.github.io/posts/java/%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Wed, 12 Aug 2020 12:55:36 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/java/%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>代码分析 保证从连接池获取连接，以及释放后连接返回到连接池 因为是模拟，只需要实现部分接口 如,DataSource的getConnection,以及Connection的close方法 对DataSource采用模板方法,先实现AbstractDataSource,再继承它,对getC</description>
    </item>
    
    <item>
      <title>数据库表自动生成Bean代码</title>
      <link>https://kongmu373.github.io/posts/java/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E8%A1%A8%E6%98%A0%E5%B0%84%E5%88%B0%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 10 Aug 2020 09:51:39 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/java/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E8%A1%A8%E6%98%A0%E5%B0%84%E5%88%B0%E5%AF%B9%E8%B1%A1/</guid>
      <description>代码分析 模拟数据库表自动生成Bean代码 即将某个数据库的所有表映射到Java代码 代码包括： - Table2POJO(将数据库的表映射到对象上，并创建该对象) - Utils(构建 JavaBean 的工具类) - Default.properties(配置文件) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23</description>
    </item>
    
    <item>
      <title>线程问题</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/javase-4/</link>
      <pubDate>Sun, 09 Aug 2020 08:30:56 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/javase-4/</guid>
      <description>线程的状态图 参考: https://www.zhihu.com/question/56494969 线程的概念 是CPU调度的基本单位，多个线程共享同一个进程的资源 同一个进程,线程之间栈是隔离的，而堆区和方法区共享 线程的启动方式 Thread Runnable ThreadPoolExecutor 线程的常用方法 run 继承 Thread 类 覆写的方法 start 开启一个线程 join 将别的线程加入到当前线程运行 sleep 不需要销毁资源 yield 将该线程重新加入到就绪队列 interrupt 打断</description>
    </item>
    
    <item>
      <title>Javase 2</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/javase-2/</link>
      <pubDate>Wed, 05 Aug 2020 13:35:00 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/javase-2/</guid>
      <description>方法区 类变量 类信息 方法信息 常量池(符号引用，以表的形式存在) 面试题: new String(&amp;quot;hello&amp;quot;); 这个语句执行创建了几个对象? 如果 &amp;ldquo;hello&amp;rdquo; 这个字面值在前面已经出现过，那么只创建了一个对象,如果没有出现过那就创建了两个对象 Java有几种数据类型? 整型 byte 1 short 2 int 4 long 8 char 2 浮点型 float double 特殊型 boolean 引用类型(return address) J</description>
    </item>
    
    <item>
      <title>Javase 1</title>
      <link>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/javase-1/</link>
      <pubDate>Sat, 01 Aug 2020 09:35:47 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/javase-1/</guid>
      <description>Java 与 C/C++ 面向过程: C语言面向过程,主要关注的是数据的流向 面向对象: C++和Java都是面向对象. 主要关注的是不同对象之间的交互 Java把C++的复杂语法，手动释放内存，以及容易造成编程错误的指针等弊端都屏蔽了 Java与操作系统之间还有一个JVM作为中间件，以至于实现跨平台，可移植，</description>
    </item>
    
  </channel>
</rss>