<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>项目 on kongmu373的博客</title>
    <link>https://kongmu373.github.io/categories/%E9%A1%B9%E7%9B%AE/</link>
    <description>Recent content in 项目 on kongmu373的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 17 Jul 2020 14:06:04 +0800</lastBuildDate>
    
	<atom:link href="https://kongmu373.github.io/categories/%E9%A1%B9%E7%9B%AE/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>代码质量插件</title>
      <link>https://kongmu373.github.io/posts/%E9%A1%B9%E7%9B%AE/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Fri, 17 Jul 2020 14:06:04 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%A1%B9%E7%9B%AE/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%8F%92%E4%BB%B6/</guid>
      <description>Checkstyle插件 https://checkstyle.sourceforge.io/ https://maven.apache.org/plugins/maven-checkstyle-plugin/usage.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 &amp;lt;!-- checkstyle --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-checkstyle-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.1&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;configLocation&amp;gt;checkstyle.xml&amp;lt;/configLocation&amp;gt; &amp;lt;encoding&amp;gt;utf-8&amp;lt;/encoding&amp;gt; &amp;lt;consoleOutput&amp;gt;true&amp;lt;/consoleOutput&amp;gt; &amp;lt;failsOnError&amp;gt;true&amp;lt;/failsOnError&amp;gt; &amp;lt;linkXRef&amp;gt;false&amp;lt;/linkXRef&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;validate&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;validate&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;check&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; + checkstyle_checks.xml &amp;lt;property name=&amp;quot;severity&amp;quot; value=&amp;quot;error&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;fileExtensions&amp;quot; value=&amp;quot;java, properties, xml&amp;quot;/&amp;gt; &amp;lt;!-- Excludes all &#39;module-info.java&#39; files --&amp;gt; &amp;lt;!-- See https://checkstyle.org/config_filefilters.html --&amp;gt; &amp;lt;module name=&amp;quot;BeforeExecutionExclusionFileFilter&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;fileNamePattern&amp;quot; value=&amp;quot;module\-info\.java$&amp;quot;/&amp;gt; &amp;lt;/module&amp;gt; &amp;lt;!-- https://checkstyle.org/config_filters.html#SuppressionFilter --&amp;gt; &amp;lt;module name=&amp;quot;SuppressionFilter&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;file&amp;quot; value=&amp;quot;${org.checkstyle.google.suppressionfilter.config}&amp;quot; default=&amp;quot;checkstyle-suppressions.xml&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;optional&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/module&amp;gt; &amp;lt;!-- Checks for whitespace --&amp;gt; &amp;lt;!-- See http://checkstyle.org/config_whitespace.html --&amp;gt; &amp;lt;module name=&amp;quot;FileTabCharacter&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;eachLine&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/module&amp;gt; &amp;lt;module name=&amp;quot;LineLength&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;fileExtensions&amp;quot; value=&amp;quot;java&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;max&amp;quot; value=&amp;quot;120&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;ignorePattern&amp;quot; value=&amp;quot;^package.* | ^import.*|a href|href|http://|https://|ftp://&amp;quot;/&amp;gt; &amp;lt;/module&amp;gt; &amp;lt;module name=&amp;quot;NewlineAtEndOfFile&amp;quot;/&amp;gt; &amp;lt;module name=&amp;quot;RegexpSingleline&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;format&amp;quot; value=&amp;quot;\s+$&amp;quot;/&amp;gt; &amp;lt;property</description>
    </item>
    
    <item>
      <title>单元测试</title>
      <link>https://kongmu373.github.io/posts/%E9%A1%B9%E7%9B%AE/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Thu, 16 Jul 2020 16:55:41 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%A1%B9%E7%9B%AE/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>为啥要用单元测试 不用手工测试,节省测试时间 防止回归 新的改动不会改变原有或其他的功能 提高代码质量 保证行为正确性 写好一个单元测试 快速: 花非常少的时间来运行单元测试 独立: 可以单独运行，不依赖其他文件 可重复: 多次运行单元测试返回一致的结果 自检查: 不用人工检查 关于测试用例命名 测试的名称应包</description>
    </item>
    
    <item>
      <title>API接口设计</title>
      <link>https://kongmu373.github.io/posts/%E9%A1%B9%E7%9B%AE/API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 15 Jul 2020 16:54:08 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%A1%B9%E7%9B%AE/API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>API接口设计 REST: Representational State Transfer 表述性状态转移 Microsoft REST API Guidelines URL结构 REST API 不出现动词 url都是对资源的描述(描述应该易于理解) 最好带版本控制信息 例子:api.kongmu373.com/v1/users/1 支持的方法 方法 描述 幂等性 GET 返回一个对象的当前值 True PUT 替换一个对象，或者创建命名对象(如果适用</description>
    </item>
    
    <item>
      <title>Docker连接数据库以及SpringBoot与Mybatis的集成</title>
      <link>https://kongmu373.github.io/posts/%E9%A1%B9%E7%9B%AE/docker%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Wed, 15 Jul 2020 13:30:15 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%A1%B9%E7%9B%AE/docker%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>开始连接数据库 mysql安装 下载镜像文件 docker pull mysql:5.7 创建实例并启动 1 2 3 4 5 6 7 # window10 我在Docker Desktop 将D盘设置为挂载文件夹 docker run -p 3306:3306 --name mysql \ -v D:/tmp/mysql/log:/var/log/mysql \ -v D:/tmp/mysql/data:/var/lib/mysql \ -v D:/tmp/mysql/conf:/etc/mysql \ -e MYSQL_ROOT_PASSWORD=123 \ -d mysql:5.7 参数说明 -p 3306:3306: 将容器的3306端口映射到主机的3306端口 -v D:/tmp/mysql/log:/var/log/mysql</description>
    </item>
    
    <item>
      <title>项目结构与数据模型转换</title>
      <link>https://kongmu373.github.io/posts/%E9%A1%B9%E7%9B%AE/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 15 Jul 2020 08:40:34 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E9%A1%B9%E7%9B%AE/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>项目结构 config 创建一个个Bean 放在这里 @Configuration/@Bean controller 对外暴露API接口 注意的点 Controller不要有过多的处理逻辑 参数校验越早做越好 @RestController/@Controller/@RequestMapping @RequestBody/@ResponseBody @PathVarible/@RequestParam manager/service 跨模块调用或模块内的调用 要先写接口, 再写实现类，可以少走点坑.(如 UserInfoManager UserInfoMagerImpl) @Component/@Service dao 还是写接口，再写实现类 @Repository dao/mapper external 调用别的服务与业务有关系的，如: 云服务，red</description>
    </item>
    
  </channel>
</rss>