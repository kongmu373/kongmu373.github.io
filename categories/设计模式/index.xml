<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on kongmu373的博客</title>
    <link>https://kongmu373.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on kongmu373的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 14 Aug 2020 15:34:55 +0800</lastBuildDate>
    
	<atom:link href="https://kongmu373.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>工厂方法与抽象工厂模式</title>
      <link>https://kongmu373.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E4%B8%8E%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 14 Aug 2020 15:34:55 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E4%B8%8E%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>工厂方法 Moveable.java 1 2 3 public interface Moveable { void go(); } Car.java 1 2 3 4 5 6 public class Car implements Moveable { public void go() { System.out.println(&amp;#34;Car go wuwuwuwuw....&amp;#34;); } } CarFactory.java 1 2 3 4 5 6 public class CarFactory { public Moveable create() { System.out.println(&amp;#34;a car created!&amp;#34;); return new Car(); } } Main.java 1 2 3 4 5 6 public class Main { public static void main(String[] args) { Moveable m = new CarFactory().create(); m.go(); } } 抽象工厂 Food.java 1 2 3 public abstract class Food { abstract void printName(); } Vehicle.java 1 2 3 public abstract class Vehicle { abstract void go(); } AbstractFactory.java 1 2 3 4 public abstract class AbastractFactory { abstract Food createFood(); abstract Vehicle createVehicle(); } XXFactory.java 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>策略模式</title>
      <link>https://kongmu373.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 14 Aug 2020 15:25:32 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>例子 Cat.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class Cat { int weight, height; public Cat(int weight, int height) { this.weight = weight; this.height = height; } @Override public String toString() { return &amp;#34;Cat{&amp;#34; + &amp;#34;weight=&amp;#34; + weight + &amp;#34;, height=&amp;#34; + height + &amp;#39;}&amp;#39;; } } Comparator.java 1 2 3 public interface Comparator&amp;lt;T&amp;gt; { int compare(T o1, T o2); } Sorter.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class Sorter&amp;lt;T&amp;gt; { public void sort(T[] arr, Comparator&amp;lt;T&amp;gt; comparator) { for(int i=0; i&amp;lt;arr.length - 1; i++) { int minPos = i; for(int j=i+1; j&amp;lt;arr.length; j++) { minPos = comparator.compare(arr[j],arr[minPos])==-1 ? j : minPos; } swap(arr, i, minPos); } } void swap(T[] arr, int i, int j) {</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://kongmu373.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 13 Aug 2020 15:20:17 +0800</pubDate>
      
      <guid>https://kongmu373.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>饿汉式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class Single01 { private static final Single01 INSTANCE = new Single01(); private Single01() {}; public static Single01 getInstance() { return INSTANCE; } public void m() { System.out.println(&amp;#34;m&amp;#34;); } public static void main(String[] args) { Single01 m1 = Single01.getInstance(); Single01 m2 = Single01.getInstance(); System.out.println(m1 == m2); } } 懒汉式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class Single02 { private static volatile Single02 INSTANCE; //JIT private Single02() { } public static Single02 getInstance() { if (INSTANCE == null) { //双重检查 synchronized (Single02.class) { if(INSTANCE == null) { try { Thread.sleep(1); } catch (InterruptedException</description>
    </item>
    
  </channel>
</rss>